#!/bin/bash 
    # PROGRAM NAME
    #   matrix
    # EXECUTION
    #   matrix OPERATION [ARGUMENT]...
    #   Performs the specified operation on 0 or more rectangular 
    #   matrix arguments and outputs the result to the console.
    # INPUTS
    #   matrix dims [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix transpose [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix mean [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix add MATRIX_LEFT MATRIX_RIGHT
    #   matrix multiply MATRIX_LEFT MATRIX_RIGHT
    # OUTPUTS
    #   dims - prints the dimensions of the matrix as "[N rows] [M columns]"
    #   transpose - reflects the matrix along the main diagonal.
    #   mean - 1xN row vector, where the first element is the mean of column
    #           one, the second element is the mean of column two, and so on
    #   add - the element-wie sum of two MxN matrices 
    #   multiply - the product of an MxN matrix and NxP matrix
    # AUTHOR
    #   Written by Kendra Ellis (ellisken@oregonstate.edu) for 
    #   CS344 Intro to Operating Systems Project 1 Winter 2018. All functions
    #   written by Kendra Ellis unless otherwise noted.


#-------------------------------------------------------------------
#
#                        GLOBAL VARIABLES 
#
#-------------------------------------------------------------------
matrix=temp_matrix$$
#matrix_lt=temp_matrix_left$$
#matrix_rt=temp_matrix_rt$$
err_msg0="Wrong number of arguments. Program exiting."
err_msg1="OPERATION unknown. Program exiting."
err_msg2="File(s) unreadable or does/do not exist. Program exiting."
err_msg3="Operation requires two MATRIX arguments. Program exiting."
err_msg4="Left and Right matrix dimensions unsuitable for chosen operation.
Program exiting."

# Trap statement to clean up in case of interruption, hang up, or termination
trap "rm -f $matrix; rm -f *tmp*; echo 'Ctrl-C entered. Exiting'; exit 1" INT HUP TERM 

#-------------------------------------------------------------------
#
#                       FUNCTION DEFINITIONS
#
#-------------------------------------------------------------------

error(){
    # NAME
    #   error()
    # DESCRIPTION
    #   Sends error message to stdout and exits with non-zero status
    # INPUTS
    #   1. A message string 
    # OUTPUTS
    #   Writes to stderr

    echo "$1" >&2
    
    # Clean up tempfiles
    if [ -e $matrix ]
    then
        rm -f $matrix
    fi

    if [ -e $matrix_lt ]
    then
        rm -f $matrix_lt
    fi

    if [ -e $matrix_rt ]
    then
        rm -f $matrix_rt
    fi

    # Exit
    exit 1
}


dims(){
    # NAME
    #   dims()
    # DESCRIPTION
    #   Calculates a matrix's dimensions (ROWS, COLUMNS) and prints
    #   the results (space separated) to stdout
    # INPUTS
    #   MATRIX file   
    # OUTPUTS
    #   ROWS COLUMNS > stdout
    
    # Store line (row)  count in one variable
    rows=$(wc -l "$1" | cut -f 1 -d " ")

    # Store word (total numbers in matrix) count in another variable
    nums=$(wc -w "$1" | cut -f 1 -d " ")

    # Determine # of columns
    columns=$((nums / rows))
    
    # Echo results
    echo "$rows $columns"
 
}


transpose(){
    # NAME
    #   transpose()
    # DESCRIPTION
    #   Translates a matrix around the main diagonal 
    # INPUTS
    #   MATRIX file
    # OUTPUTS
    #   Displays the transpose matrix through stdout

    tempcol=tempcol$$
    temptrans=temptrans$$

    # Get column count
    col_ct=$(head -1 "$1" | wc -w)
    # Get row count
    row_ct=$(wc -l "$1" | cut -f 1 -d " ")
    
    # For each column in the matrix
    i=1
    while [ $i -le $col_ct ]
    do
        # Save the column in a tempfile
        cut -f "$i" $1 > $tempcol
        # For each line (number) in tempcol
        # append to temptrans file in same line to create row
        j=1 # Used to track column number
        while read num
        do
            echo -n "$num" >> $temptrans
            # If not the last number in the column, add tab delimiter
            if [ $j != $row_ct ]
            then
                echo -n -e "\t" >>$temptrans
            fi
            j=$(expr $j + 1 ) # Increment j
        done < $tempcol
        echo >> $temptrans
        rm -f $tempcol
        i=$(expr $i + 1 )
        j=1 # Reset j
    done
    
    # Display transpose matrix
    cat $temptrans

    # Clean up temp files
    rm -f $temptrans
}


mean(){
    # NAME
    #   mean()
    # DESCRIPTION
    #   Takes an MxN matrix and returns a 1xN row vector that contains
    #   the mean value of each column.
    # INPUTS
    #   MATRIX file
    # OUTPUTS
    #   Displays mean row vector through stdout
    
    tempcol=tempcol$$
    tempmean=tempmean$$

    # Get column count
    col_ct=$(head -1 "$1" | wc -w)
    i=1  # Set up column indexing variables
    total=0

    # For each column in the matrix
    while [ $i -le $col_ct ]
    do
        # Save the column in a tempfile
        cut -f "$i" "$1" > $tempcol
        # Get row count
        row_ct=$(cat "$tempcol" | wc -l)

        # For each line (number) in tempcol
        # Add item value to total
        while read num
        do
            total=$((total + num))
        done < $tempcol

        # Compute the mean value
        row_ct_over_2=$((row_ct / 2))
        mean=$(((total + row_ct_over_2 * ((total>0)*2-1)) / row_ct))

        # Add to tempmean file
        echo -n "$mean" >> $tempmean
        # If column tracker != col_ct
        if [ $i != $col_ct ]
        then
            # Add a tab between elements
            echo -n -e  "\t" >> $tempmean
        fi
        # Increment i
        i=$(expr $i + 1 )
        # Reset total
        total=0
        # Delete tempcol
        rm -f $tempcol
    done

    # Add \n to tempmean?
    echo >> $tempmean

    # Display tempmean
    cat $tempmean

    # Clean up temp files
    rm -f $tempmean
}


add(){
    # NAME
    #   add()
    # DESCRIPTION
    #   Takes two MxN matrices and adds them together element-wise
    #   to produce an MxN matrix.
    # INPUTS
    #   Matrix_left, Matrix_right
    # OUTPUTS
    #   Displays the resulting MxN matrix via stdout, otherwise
    #   returns an error to stderr.

    temprow_lt=temprowlt$$
    temprow_rt=temprowrt$$
    tempsum=tempsum$$

    # Get dimensions of each matrix
    M1=$(dims "$1" | cut -f 1 -d " ")
    N1=$(dims "$1" | cut -f 2 -d " ")
    M2=$(dims "$2" | cut -f 1 -d " ")
    N2=$(dims "$2" | cut -f 2 -d " ")

    # Verify dimensions work for matrix addition
    if [ $M1 != $M2 ] || [ $N1 != $N2 ]
    then
       error "$err_msg4" 
    else 
        # Create column indexing variable
        j=1
        # Else read a line in from each matrix file
        while read line_lt && read line_rt <&3
        do
            # Save in temprow files
            echo "$line_lt" > $temprow_lt
            echo "$line_rt" > $temprow_rt
            # While j is less than column count
            while [ $j -le $N1 ]
            do
                # Get the first number in each temprow file
                num1=$(cut -f "$j" $temprow_lt)
                num2=$(cut -f "$j" $temprow_rt)
                # Add values together and echo total to tempadd file
                total=$((num1 + num2))
                echo -n "$total" >> $tempsum
                # if j!=col_ct, insert tab delimiter
                if [ $j != $N1 ]
                then
                    echo -n -e "\t" >> $tempsum
                fi
                # Increment j
                j=$(expr $j + 1)
            done
            # Delete temprow files
            rm -f $temprow_lt
            rm -f $temprow_rt
            j=1 # Reset j
            # Insert newline
            echo >> $tempsum
        done < $1 3< $2
        # Display tempsum file
        cat $tempsum
        # Clean up
        rm -f $tempsum
    fi
}


multiply(){
    # NAME
    #   multiply()
    # DESCRIPTION
    #   Takes an MxN and NxP matrix and produces an MxP
    #   matrix
    # INPUTS
    #   Matrix_left, Matrix_right
    # OUTPUTS
    #   Displays the resulting MxP matrix via stdout, otherwise
    #   returns an error to stderr.

    temprow_lt=temprowlt$$
    temprow_rt=tempcolrt$$
    tempproduct=tempproduct$$

    # Get dimensions N1 and N2
    # (this is stupid and dims() should be rewritten
    # to take arguments)
    M=$(cat $1 | wc -l)
    N2=$(cat $2 | wc -l)
    elements1=$(cat $1 | wc -w)
    N1=$((elements1 / M))

    # Verify dimensions work for matrix multiplication
    if [ $N1 != $N2 ]
    then
       error "$err_msg4" 
    else 
        # Create column indexing
        j=1
        echo "Multiplying"
        # Read in row from left matrix
        while read row_lt
        do
            # Save in temprow file
            echo "$row_lt" > $temprow_lt

            # While there are columns in the right matrix
                # Save column
                # Transpose column
                # Add row_lt and col_rt
                # Echo to tempproduct same line
                # If j != col_ct, add tab
                # Increment j
            # Insert newline into tempproduct    
        done < $1
        # Display tempsum file
        #cat $tempproduct
        # Clean up
        #rm -f $tempproduct
    fi
}

#-------------------------------------------------------------------
#
#                         PROGRAM EXECUTION
#
#-------------------------------------------------------------------

# Validate OPERATION specified
if [ "$#" -lt 1 ]
then
    error "$err_msg0"
elif [ "$1" != "dims" ] && [ "$1" != "transpose" ] && [ "$1" != "mean" ] && [ "$1" != "add" ] && [ "$1" != "multiply" ]
then
    error "$err_msg1"
fi


# Handle input processing for "dims" "transpose" or "mean"
if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]
then
    # If no file specified, use input from stdin
    if [ "$#" == 1 ]
    then
        cat > $matrix
        $1 "$matrix" #Call function
    # Else if file specified, save to tempin
    elif [ "$#" == 2 ]
    then
        if [ -r "$2" ] && [ -e "$2" ]
        then
            # Call function
            $1 "${@:2}"
        else
            error "$err_msg2"
        fi

    # Else there are too many arguments
    else
        error "$err_msg0"
    fi

# Handle input processing for "add" and "multiply"
else
    # Verify correct # of arguments
    if [ "$#" != 3 ]
    then
        error "$err_msg3"
    
    # If # args correct, and files are readable && exist && nonzero 
    # then store in variables for files
    elif [ -r "$2" ] && [ -e "$2" ] && [ -s "$2" ] && [ -r "$3" ] && [ -e "$3" ] && [ -s "$3" ]
    then
        $1 "${@:2}"
    else
        error "$err_msg2"
    fi
fi

# Clean up
if [ -e $matrix ]
then
    rm -f $matrix
fi

