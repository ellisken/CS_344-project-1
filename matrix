#!/bin/bash -e
    # PROGRAM NAME
    #   matrix
    # EXECUTION
    #   matrix OPERATION [ARGUMENT]...
    #   Performs the specified operation on 0 or more rectangular 
    #   matrix arguments and outputs the result to the console.
    # INPUTS
    #   matrix dims [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix transpose [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix mean [MATRIX] - reads the file specified or a matrix provided
    #       via stdin
    #   matrix add MATRIX_LEFT MATRIX_RIGHT
    #   matrix multiply MATRIX_LEFT MATRIX_RIGHT
    # OUTPUTS
    #   dims - prints the dimensions of the matrix as "[N rows] [M columns]"
    #   transpose - reflects the matrix along the main diagonal.
    #   mean - 1xN row vector, where the first element is the mean of column
    #           one, the second element is the mean of column two, and so on
    #   add - the element-wie sum of two MxN matrices 
    #   multiply - the product of an MxN matrix and NxP matrix
    # AUTHOR
    #   Written by Kendra Ellis (ellisken@oregonstate.edu) for 
    #   CS344 Intro to Operating Systems Project 1 Winter 2018. All functions
    #   written by Kendra Ellis unless otherwise noted.


#-------------------------------------------------------------------
#
#                        GLOBAL VARIABLES 
#
#-------------------------------------------------------------------
matrix=temp_matrix$$
matrix_lt=temp_matrix_left$$
matrix_rt=temp_matrix_rt$$
err_msg0="Wrong number of arguments. Program exiting."
err_msg1="OPERATION unknown. Program exiting."
err_msg2="File(s) unreadable or does/do not exist. Program exiting."
err_msg3="Operation requires two MATRIX arguments. Program exiting."

# Trap statement to clean up in case of interruption, hang up, or termination
trap "rm -f $matrix; rm -f $matrix_lt; rm -f $matrix_rt; echo 'Ctrl-C entered. Exiting'; exit 1" INT HUP TERM 

#-------------------------------------------------------------------
#
#                       FUNCTION DEFINITIONS
#
#-------------------------------------------------------------------

error(){
    # NAME
    #   error()
    # DESCRIPTION
    #   Sends error message to stdout and exits with non-zero status
    # INPUTS
    #   1. A message string 
    # OUTPUTS
    #   Writes to stderr
    # AUTHOR

    echo "$1" >&2
    exit 1
}

dims(){
    # NAME
    #   dims()
    # DESCRIPTION
    #   Calculates a matrix's dimensions (ROWS, COLUMNS) and prints
    #   the results (space separated) to stdout
    # INPUTS
    #   MATRIX file   
    # OUTPUTS
    #   ROWS COLUMNS > stdout
    
    # Store line (row)  count in one variable
    rows=$(wc -l "$matrix" | cut -f 1 -d " ")

    # Store word (total numbers in matrix) count in another variable
    nums=$(wc -w "$matrix" | cut -f 1 -d " ")

    # Determine # of columns
    columns=$((nums / rows))
    
    # Echo results
    echo "$rows $columns"
 
}


transpose(){
    # NAME
    #   transpose()
    # DESCRIPTION
    #   Translates a matrix around the main diagonal 
    # INPUTS
    #   MATRIX file
    # OUTPUTS
    #   Prints the transpose to stdout
    tempcol=tempcol$$
    temptrans=temptrans$$
    temptrans2=temptrans2$$

    # Get column count
    col_ct=$(head -1 $matrix | wc -w)
    # Get row count
    row_ct=$(wc -l "$matrix" | cut -f 1 -d " ")
    
    # For each column in the matrix
    i=1
    while [ $i -le $col_ct ]
    do
        # Save the column in a tempfile
        cut -f "$i" $matrix > $tempcol
        # For each line (number) in tempcol
        # append to temptrans file in same line to create row
        j=1 # Used to track column number
        while read num
        do
            echo -n "$num" >> $temptrans
            # If not the last number in the column, add tab delimiter
            if [ $j != $row_ct ]
            then
                echo -n -e "\t" >>$temptrans
            fi
            j=$(expr $j + 1 ) # Increment j
        done < $tempcol
        echo >> $temptrans
        rm -f $tempcol
        i=$(expr $i + 1 )
        j=1 # Reset j
    done
    
    # Display transpose matrix
    cat $temptrans

    # Erase column tempfile
    rm -f $temptrans
}

#-------------------------------------------------------------------
#
#                         PROGRAM EXECUTION
#
#-------------------------------------------------------------------

# Validate OPERATION specified
if [ "$#" -lt 1 ]
then
    error "$err_msg0"
elif [ "$1" != "dims" ] && [ "$1" != "transpose" ] && [ "$1" != "mean" ] && [ "$1" != "add" ] && [ "$1" != "multiply" ]
then
    error "$err_msg1"
fi


# Handle input processing for "dims" "transpose" or "mean"
if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]
then
    # If no file specified, use input from stdin
    if [ "$#" == 1 ]
    then
        cat > $matrix

    # Else if file specified, save to tempin
    elif [ "$#" == 2 ]
    then
        if [ -r "$2" ] && [ -e "$2" ]
        then
            cat "$2" > $matrix
        else
            error "$err_msg2"
        fi
    # Else there are too many arguments
    else
        error "$err_msg0"
    fi

# Handle input processing for "add" and "multiply"
else
    # Verify correct # of arguments
    if [ "$#" != 3 ]
    then
        error "$err_msg3"
    
    # If # args correct, and files are readable && exist 
    # then store in variables for files
    elif [ -r "$2" ] && [ -e "$2" ] && [ -r "$3" ] && [ -e "$3" ]
    then
        cat "$2" > $matrix_lt
        cat "$3" > $matrix_rt
    else
        error "$err_msg2"
    fi
fi


# Then perform the operation
$1 "${@:2}"

# Clean up tempfiles
if [ -e $matrix ]
then
    rm -f $matrix
fi

if [ -e $matrix_lt ]
then
    rm -f $matrix_lt
fi

if [ -e $matrix_rt ]
then
    rm -f $matrix_rt
fi

# Return
exit 0
